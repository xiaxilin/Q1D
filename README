TODO: clean this thing up!

Quasi-1D Nozzle, written in Fortran 9X

This is a FVM code with a multistep Runge-Kutta explicit solver.
Both first order and second order ( via MUSCL primitive variable extrapolation )
fluxes are included for a variety of schemes.

! The code requires that the number of interior cells, N, be specified,
! however, two additional cells, cell(1) and cell(N+2), are ghost cells,
! while the interior domain is contained by cell(2,N+1).
! Since there are N interior cells, there are N+1 faces.
! Hopefully the below diagram explains this:

! DOMAIN: inflow |        interior        | outflow
!        -----------------------------------------
! CELLS:     1   |   2   | ...... |  N+1  |  N+2
!        -----------------------------------------
! FACES:         1       2        N      N+1

! Where appropriate, the code will loop over faces, 
! such as when it is calculating fluxes, or over cells, 
! such as when the explicit iteration is being performed.

Files:

  q1d.nml == input file
  q1d.grd == grid file

  q1d.rst == restart file
  q1d.hst == convergence history file

  q1d_lines.tec == tecplot XY formatted data file
  q1d_cells.tec == tecplot cell-centered color plot file

The code has been branched and merged several times, 
with this repo starting at an intermediate step in the attempt to correct some
issues and apply lessons learned.

The code base will be split into several files,
and many of the current methods will be adjusted to work as functions to aid 
unit-testing.

Due to the splitting of the source code into multiple files, 
a makefile for Linux systems will be appearing shortly followed by a 
slink file for Windows systems with a Silverfrost compiler.

Once this code base is up to standard, an implicit solver will be implemented,
followed by an adjoint code.

Example unit-tests will be added.

Coding standard:
80 column line limit for readability
No tabs, only spaces for indentation, run untabify in emacs
No trailing whitespace
Try to avoid CAPS, except in comments

Explicitly declare public routines in modules
Use functions wherever possible
gfortran -O0 -g -Wall -fbounds-check -Werror -o q1d set_precision.f90 set_constants.f90 fluid_constants.f90 initialize_grid.f90 initialize_soln.f90 solvers.f90 namelist.f90 q1d.f90
